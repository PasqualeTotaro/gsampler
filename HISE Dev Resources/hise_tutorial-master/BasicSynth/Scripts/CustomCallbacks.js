/** Custom Callback definitions
*
*   This file contains custom callbacks for any non-trivial parameter change.
*   Most of the stuff you see here can be autogenerated using the context menu of the interface designer.
*/

//! ==================================================================== EQ Logic

// Get this line by selecting the module in the main workspace, right click on the header
// and choose "Create Script Variable Declaration.
const var ParametriqEQ = Synth.getEffect("Parametriq EQ");

// Get these lines by selecting all controls you need and choose "Create Custom Callback for Selection
inline function onhighEqSliderControl(component, value)
{
    // We need to to some math for getting the right parameter ID for the CurveEQ.
    // Use the BandOffset parameter to calculate the offset (in this case the band with index 2)
    // and then add the actual parameter ID you want to control.
    
	ParametriqEQ.setAttribute(ParametriqEQ.BandOffset * 2 + ParametriqEQ.Gain, value);
};

Content.getComponent("highEqSlider").setControlCallback(onhighEqSliderControl);

inline function onmidEqSliderControl(component, value)
{
	ParametriqEQ.setAttribute(ParametriqEQ.BandOffset * 1 + ParametriqEQ.Gain, value);
};

Content.getComponent("midEqSlider").setControlCallback(onmidEqSliderControl);

inline function onlowEqSliderControl(component, value)
{
	ParametriqEQ.setAttribute(ParametriqEQ.BandOffset * 0 + ParametriqEQ.Gain, value);
};

Content.getComponent("lowEqSlider").setControlCallback(onlowEqSliderControl);

//! ================================================================= Delay Logic

const var Delay2 = Synth.getEffect("Delay2");
const var SimpleReverb = Synth.getEffect("Simple Reverb");

inline function onDelayButtonControl(component, value)
{
	Delay2.setBypassed(value);
	SimpleReverb.setBypassed(value);
};

Content.getComponent("DelayButton").setControlCallback(onDelayButtonControl);

inline function onDelayFeedbackSliderControl(component, value)
{
	Delay2.setAttribute(Delay2.FeedbackLeft, value);
	Delay2.setAttribute(Delay2.FeedbackRight, value);
};

Content.getComponent("DelayFeedbackSlider").setControlCallback(onDelayFeedbackSliderControl);


//! =============================================================== Limiter Logic

const var Makeup = Synth.getEffect("Makeup");
const var Dynamics = Synth.getEffect("Dynamics");


inline function onLimiterSliderControl(component, value)
{
    Makeup.setAttribute(Makeup.Gain, value);
	Dynamics.setAttribute(Dynamics.LimiterThreshold, -value);
	
};

Content.getComponent("LimiterSlider").setControlCallback(onLimiterSliderControl);

inline function onLimiterButtonControl(component, value)
{
	Makeup.setBypassed(value);
	Dynamics.setBypassed(value);
};

Content.getComponent("LimiterButton").setControlCallback(onLimiterButtonControl);
